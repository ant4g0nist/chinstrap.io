{
  "docusaurus-plugin-content-docs": {
    "default": {
      "loadedVersions": [
        {
          "versionName": "current",
          "versionLabel": "Next",
          "versionPath": "/docs",
          "tagsPath": "/docs/tags",
          "versionEditUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs",
          "versionEditUrlLocalized": "https://github.com/ant4g0nist/chinstrap.io/blob/main/i18n/en/docusaurus-plugin-content-docs/current",
          "versionBanner": null,
          "versionBadge": false,
          "versionClassName": "docs-version-current",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/Users/ant4g0nist/Desktop/Tezos/chinstrap.io/sidebars.js",
          "contentPath": "/Users/ant4g0nist/Desktop/Tezos/chinstrap.io/docs",
          "contentPathLocalized": "/Users/ant4g0nist/Desktop/Tezos/chinstrap.io/i18n/en/docusaurus-plugin-content-docs/current",
          "docs": [
            {
              "unversionedId": "compilation",
              "id": "compilation",
              "title": "Compiling smart contracts with *Chinstrap*",
              "description": "Chinstrap is mainly used for smart contract compilation, originations and testing.",
              "source": "@site/docs/compilation.md",
              "sourceDirName": ".",
              "slug": "/compilation",
              "permalink": "/docs/compilation",
              "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs/compilation.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Usage",
                "permalink": "/docs/usage"
              },
              "next": {
                "title": "Sandbox",
                "permalink": "/docs/sandbox"
              }
            },
            {
              "unversionedId": "conclusion",
              "id": "conclusion",
              "title": "Conclusion",
              "description": "The first step in developing a Dapp is to deploy the smart contracts. Chinstrap takes LIGO/SmartPy code and deploys it onto any public or private network. Each origination needs an initial storage that is compliant with the storage type of Michelson code.",
              "source": "@site/docs/conclusion.md",
              "sourceDirName": ".",
              "slug": "/conclusion",
              "permalink": "/docs/conclusion",
              "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs/conclusion.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Chinstrap REPL",
                "permalink": "/docs/repl"
              }
            },
            {
              "unversionedId": "faq",
              "id": "faq",
              "title": "FAQ",
              "description": "",
              "source": "@site/docs/faq.md",
              "sourceDirName": ".",
              "slug": "/faq",
              "permalink": "/docs/faq",
              "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs/faq.md",
              "tags": [],
              "version": "current",
              "frontMatter": {}
            },
            {
              "unversionedId": "index",
              "id": "index",
              "title": "Deploy with Chinstrap",
              "description": "Chinstrap",
              "source": "@site/docs/index.md",
              "sourceDirName": ".",
              "slug": "/",
              "permalink": "/docs/",
              "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs/index.md",
              "tags": [],
              "version": "current",
              "frontMatter": {
                "title": "Deploy with Chinstrap",
                "authors": "ant4g0nist"
              },
              "sidebar": "tutorialSidebar",
              "next": {
                "title": "*Chinstrap* installation",
                "permalink": "/docs/installation"
              }
            },
            {
              "unversionedId": "installation",
              "id": "installation",
              "title": "*Chinstrap* installation",
              "description": "Requirements and dependencies",
              "source": "@site/docs/installation.md",
              "sourceDirName": ".",
              "slug": "/installation",
              "permalink": "/docs/installation",
              "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs/installation.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Deploy with Chinstrap",
                "permalink": "/docs/"
              },
              "next": {
                "title": "Usage",
                "permalink": "/docs/usage"
              }
            },
            {
              "unversionedId": "origination",
              "id": "origination",
              "title": "Originating smart contracts with *Chinstrap*",
              "description": "At this point, the smart contracts are compiled and ready to be originated. We are ready to originate or deploy our smart contracts on to the configured network. We will make use of Flextesa sandbox as a local node, to test our originations.",
              "source": "@site/docs/origination.md",
              "sourceDirName": ".",
              "slug": "/origination",
              "permalink": "/docs/origination",
              "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs/origination.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Sandbox",
                "permalink": "/docs/sandbox"
              },
              "next": {
                "title": "Testing",
                "permalink": "/docs/testing"
              }
            },
            {
              "unversionedId": "repl",
              "id": "repl",
              "title": "Chinstrap REPL",
              "description": "Chinstrap provides a develop sub-command that provides a repl to develop interactively. chinstrap develop launches a powerful repl, exposing Chinstrap's functionalitiy to the repl making the interaction with Tezos networks much easier.",
              "source": "@site/docs/repl.md",
              "sourceDirName": ".",
              "slug": "/repl",
              "permalink": "/docs/repl",
              "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs/repl.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Testing",
                "permalink": "/docs/testing"
              },
              "next": {
                "title": "Conclusion",
                "permalink": "/docs/conclusion"
              }
            },
            {
              "unversionedId": "sandbox",
              "id": "sandbox",
              "title": "Sandbox",
              "description": "Chinstrap provides a sandbox sub-command to manage a local development node with flextesa sandbox. This enables development and testing smart contracts on test network, before we proceed with mainnet.",
              "source": "@site/docs/sandbox.md",
              "sourceDirName": ".",
              "slug": "/sandbox",
              "permalink": "/docs/sandbox",
              "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs/sandbox.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Compiling smart contracts with *Chinstrap*",
                "permalink": "/docs/compilation"
              },
              "next": {
                "title": "Originating smart contracts with *Chinstrap*",
                "permalink": "/docs/origination"
              }
            },
            {
              "unversionedId": "testing",
              "id": "testing",
              "title": "Testing",
              "description": "Chinstrap supports testing smart contracts with SmartPy, pytest and Ligo. Contracts programmed in Ligo can also be tested with pytest.",
              "source": "@site/docs/testing.md",
              "sourceDirName": ".",
              "slug": "/testing",
              "permalink": "/docs/testing",
              "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs/testing.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Originating smart contracts with *Chinstrap*",
                "permalink": "/docs/origination"
              },
              "next": {
                "title": "Chinstrap REPL",
                "permalink": "/docs/repl"
              }
            },
            {
              "unversionedId": "usage",
              "id": "usage",
              "title": "Usage",
              "description": "You can get list of sub-commands supported by Chinstrap by running:",
              "source": "@site/docs/usage.md",
              "sourceDirName": ".",
              "slug": "/usage",
              "permalink": "/docs/usage",
              "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/docs/usage.md",
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "*Chinstrap* installation",
                "permalink": "/docs/installation"
              },
              "next": {
                "title": "Compiling smart contracts with *Chinstrap*",
                "permalink": "/docs/compilation"
              }
            }
          ],
          "sidebars": {
            "tutorialSidebar": [
              {
                "type": "doc",
                "label": "👋 Introduction",
                "id": "index"
              },
              {
                "type": "doc",
                "label": "🎬 Installation",
                "id": "installation"
              },
              {
                "type": "doc",
                "label": "📖 Usage",
                "id": "usage"
              },
              {
                "type": "doc",
                "label": "⏳ Compilation",
                "id": "compilation"
              },
              {
                "type": "doc",
                "label": "🍱 Sandbox",
                "id": "sandbox"
              },
              {
                "type": "doc",
                "label": "🖥️ Origination",
                "id": "origination"
              },
              {
                "type": "doc",
                "label": "🧪 Testing",
                "id": "testing"
              },
              {
                "type": "doc",
                "label": "🕹️ REPL",
                "id": "repl"
              },
              {
                "type": "doc",
                "label": "🏁 Conclusion",
                "id": "conclusion"
              }
            ]
          },
          "mainDocId": "index",
          "categoryGeneratedIndices": []
        }
      ]
    }
  },
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [
        {
          "id": "chinstrap-tezos-tezasia-workshop",
          "metadata": {
            "permalink": "/blog/chinstrap-tezos-tezasia-workshop",
            "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/blog/chinstrap tezasia 2022-07-14.md",
            "source": "@site/blog/chinstrap tezasia 2022-07-14.md",
            "title": "Chinstrap Workshop at TezAsia Hackathon",
            "description": "Tezos development with Chinstrap - building, testing and deploying Tezos smart contracts",
            "date": "2022-07-14T00:00:00.000Z",
            "formattedDate": "July 14, 2022",
            "tags": [
              {
                "label": "chinstrap",
                "permalink": "/blog/tags/chinstrap"
              },
              {
                "label": "tezos",
                "permalink": "/blog/tags/tezos"
              },
              {
                "label": "smart-contracts",
                "permalink": "/blog/tags/smart-contracts"
              },
              {
                "label": "repl",
                "permalink": "/blog/tags/repl"
              }
            ],
            "readingTime": 0.105,
            "truncated": false,
            "authors": [
              {
                "name": "ant4g0nist",
                "title": "Creator of Chinstrap",
                "url": "https://github.com/ant4g0nist",
                "image_url": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg",
                "imageURL": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg"
              }
            ],
            "frontMatter": {
              "title": "Chinstrap Workshop at TezAsia Hackathon",
              "description": "Tezos development with Chinstrap - building, testing and deploying Tezos smart contracts",
              "slug": "chinstrap-tezos-tezasia-workshop",
              "authors": [
                {
                  "name": "ant4g0nist",
                  "title": "Creator of Chinstrap",
                  "url": "https://github.com/ant4g0nist",
                  "image_url": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg",
                  "imageURL": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg"
                }
              ],
              "tags": [
                "chinstrap",
                "tezos",
                "smart-contracts",
                "repl"
              ],
              "image": "https://chinstrap.io/img/logo.png",
              "hide_table_of_contents": false
            },
            "nextItem": {
              "title": "Chinstrap - Tezos smart contract development using REPL",
              "permalink": "/blog/chinstrap-tezos-smart-contract-development-repl"
            }
          },
          "content": "Slides are available here:\n\n[Tezos development with Chinstrap](/img/Chinstrap-TezAsia-Hackathon.pdf)\n\n<img src=\"/img/tezasia.jpeg\" width=\"500\"/>\n\n* Docs 📖   : https://chinstrap.io/docs\n* Tele 💬   : https://t.me/chinstrap_io"
        },
        {
          "id": "chinstrap-tezos-smart-contract-development-repl",
          "metadata": {
            "permalink": "/blog/chinstrap-tezos-smart-contract-development-repl",
            "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/blog/Chinstrap - Tezos smart contract development using repl.md",
            "source": "@site/blog/Chinstrap - Tezos smart contract development using repl.md",
            "title": "Chinstrap - Tezos smart contract development using REPL",
            "description": "How to create, test and deploy Tezos smart contracts?",
            "date": "2022-06-14T15:15:50.000Z",
            "formattedDate": "June 14, 2022",
            "tags": [
              {
                "label": "chinstrap",
                "permalink": "/blog/tags/chinstrap"
              },
              {
                "label": "tezos",
                "permalink": "/blog/tags/tezos"
              },
              {
                "label": "smart-contracts",
                "permalink": "/blog/tags/smart-contracts"
              },
              {
                "label": "repl",
                "permalink": "/blog/tags/repl"
              }
            ],
            "readingTime": 2.495,
            "truncated": false,
            "authors": [
              {
                "name": "ant4g0nist",
                "title": "Creator of Chinstrap",
                "url": "https://github.com/ant4g0nist",
                "image_url": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg",
                "imageURL": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg"
              }
            ],
            "frontMatter": {
              "title": "Chinstrap - Tezos smart contract development using REPL",
              "description": "How to create, test and deploy Tezos smart contracts?",
              "slug": "chinstrap-tezos-smart-contract-development-repl",
              "authors": [
                {
                  "name": "ant4g0nist",
                  "title": "Creator of Chinstrap",
                  "url": "https://github.com/ant4g0nist",
                  "image_url": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg",
                  "imageURL": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg"
                }
              ],
              "tags": [
                "chinstrap",
                "tezos",
                "smart-contracts",
                "repl"
              ],
              "image": "https://chinstrap.io/img/logo.png",
              "hide_table_of_contents": false
            },
            "prevItem": {
              "title": "Chinstrap Workshop at TezAsia Hackathon",
              "permalink": "/blog/chinstrap-tezos-tezasia-workshop"
            },
            "nextItem": {
              "title": "Chinstrap - Tezos smart contract development",
              "permalink": "/blog/chinstrap-tezos-smart-contract-development"
            }
          },
          "content": "## Intro\n\nWe developed, tested, and originated a FA1.2 contract to our Flextesa sandbox in our previous post. In this post, we will do the same, but instead of using `Chinstrap` cli, we will use `Chinstrap` REPL.\n\nPlease read the [Part-1](https://chinstrap.io/blog/chinstrap-tezos-smart-contract-development) of this 2-part series on how to use Chinstrap to create, test and deploy Tezos smart contracts.\n\n## Chinstrap REPL\n\nChinstrap's read–eval–print loop (REPL) is a simple interactive development environment that takes a single command/method call, executes them, and returns the result. Using repl makes interacting with the deployed contracts on the chain easy.\n\nChinstrap provides a `develop` sub-command that provides a repl to develop interactively. `chinstrap develop` launches a powerful repl, exposing Chinstrap's functionality to the repl, making the interaction with Tezos networks much more effortless.\n\n```sh\nchinstrap develop -h\n```\n\n![repl-deply](/img/repl-h.png)\n\n## Setup\nPlease clone the `ChinToken` repo from [ant4g0nist/ChinToken](https://github.com/ant4g0nist/ChinToken).\n\n## Launching the REPL\n\nWhen we launch `Chinstrap`'s repl, we can either start the Flextesa sandbox or directly connect to any configured network in `chinstrap-config.yml` file.\n\nThe following process remains for all the networks.\n\n### Chinstrap REPL - Sandbox\nThe configuration for the local development should like:\n\n```yaml\nchinstrap:\n  network:\n    development:\n      host: http://localhost:20000\n      accounts:\n        - privateKeyFile: ./.secret\n  compiler:\n    lang: smartpy\n    test: smartpy\n```\n\nTo start a local sandbox on port 20000, generate 5 test accounts and use Ithaca protocol, and launch the repl, run the following command:\n\n```sh\nchinstrap develop -p Ithaca -n development -o 20000 -c 5\n```\n![repl-launch](/img/repl-launch.png)\n\n### Chinstrap REPL - Compile\nChinstrap repl also has a *compile* function that compiles contracts inside `contracts` folder.\n\n```sh\nchinstrap:> compile()\n✔ FA1.2.py compilation successful!\nchinstrap:>\n```\n\n### Chinstrap REPL - Test\nChinstrap repl also has a *test* function that runs tests inside the `tests` folder.\n\n```py\nchinstrap:> test()\n✔ Tests passed on FA1.2.test.py\nchinstrap:>\n```\n![test](/img/repl-compile-test.png)\n\n### Chinstrap REPL - Origination\n*Chinstrap repl* provides *originate* method to originate contracts.\n\n![repl-originate](/img/repl-originatefa12.png)\n\nNow that we have originated the contract, things get a little more interesting. We can use the repl interface to interact with the contract.\n\n## Chinstrap REPL - Inspect contract\nChinstrap exposes `getContractFromAddress` function through which we can get the contract interface from an address.\n\n```sh\nchinstrap:> contract = getContractFromAddress('KT1MMvEKHoZ413FbF7CD5Y4MN5jDeLYg4r2S')\n```\n\nNow you can inspect and call the FA1.2 entrypoints on the `contract` object.\n\nFor example, to access the contract's storage:\n\n![repl-contract-storage](/img/repl-contract-storage.png)\n\nFor further reading on all the available methods in the REPL, please check [chinstrap/repl](https://chinstrap.io/docs/repl) and (Inspecting Tezos smart contracts with PyTezos library)[https://baking-bad.org/blog/2019/03/24/inspecting-tezos-smart-contracts-with-pytezos-library/]\n\n## Clean up\nStop the sandbox after the completion of testing.\n\n```sh\nchinstrap:> stopSandbox()\n```\nor\n\nRun this in after exiting the repl:\n\n```sh\nchinstrap sandbox -s\n```\n\n## Conclusion\n\nChinstrap's REPL is a more excellent way to interactively work with your contracts for testing and compiling or executing transactions by hand. Chinstrap's integration with Sandbox and Pytezos makes it a cleaner and more accessible interface for developing in the Tezos environment.\n\nJoin the telegram for further discussions: https://t.me/chinstrap_io\nFollow us on Twitter for continuous updates: https://twitter.com/chinstrap_io\n\n\nHappy Hacking 👾 🎉"
        },
        {
          "id": "chinstrap-tezos-smart-contract-development",
          "metadata": {
            "permalink": "/blog/chinstrap-tezos-smart-contract-development",
            "editUrl": "https://github.com/ant4g0nist/chinstrap.io/blob/main/blog/Chinstrap - Tezos smart contract development.md",
            "source": "@site/blog/Chinstrap - Tezos smart contract development.md",
            "title": "Chinstrap - Tezos smart contract development",
            "description": "How to create, test and deploy Tezos smart contracts?",
            "date": "2022-06-14T13:53:23.000Z",
            "formattedDate": "June 14, 2022",
            "tags": [
              {
                "label": "chinstrap",
                "permalink": "/blog/tags/chinstrap"
              },
              {
                "label": "tezos",
                "permalink": "/blog/tags/tezos"
              },
              {
                "label": "smart-contracts",
                "permalink": "/blog/tags/smart-contracts"
              }
            ],
            "readingTime": 4.645,
            "truncated": false,
            "authors": [
              {
                "name": "ant4g0nist",
                "title": "Creator of Chinstrap",
                "url": "https://github.com/ant4g0nist",
                "image_url": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg",
                "imageURL": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg"
              }
            ],
            "frontMatter": {
              "title": "Chinstrap - Tezos smart contract development",
              "description": "How to create, test and deploy Tezos smart contracts?",
              "slug": "chinstrap-tezos-smart-contract-development",
              "authors": [
                {
                  "name": "ant4g0nist",
                  "title": "Creator of Chinstrap",
                  "url": "https://github.com/ant4g0nist",
                  "image_url": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg",
                  "imageURL": "https://pbs.twimg.com/profile_images/1536453566566748161/RTjM3OCI_400x400.jpg"
                }
              ],
              "tags": [
                "chinstrap",
                "tezos",
                "smart-contracts"
              ],
              "image": "https://chinstrap.io/img/logo.png",
              "hide_table_of_contents": false
            },
            "prevItem": {
              "title": "Chinstrap - Tezos smart contract development using REPL",
              "permalink": "/blog/chinstrap-tezos-smart-contract-development-repl"
            }
          },
          "content": "## Intro\n\nThis blog will show how to create, test and deploy Tezos smart contracts using Chinstrap. \nLet's try to build a simple FA1.2 smart contract in SmartPy that has the following functionalities:\n\n* mint: allows administrators to mint new tokens\n* burn: allows administrators to burn tokens\n* pause/unpause: allows administrators to pause or unpause the contract\n\nLet's start by installing Chinstrap. I will use a macOS for this tutorial.\n\n### Install Chinstrap\n\nInstall dependecies on macOS:\n\n```sh\nbrew tap cuber/homebrew-libsecp256k1\nbrew install libsodium libsecp256k1 gmp\n```\n\nand on Ubuntu, Debian and other apt-based distributions:\n\n```sh\napt install libsodium-dev libsecp256k1-dev libgmp-dev pkg-config\n```\n\nTo install Chinstrap:\n\n```sh\npip3 install -U chinstrap\n```\n\n\n#### M1 (ARM)\nIn case `secp256k1` or `gmp` cannot find either include or lib paths, try explicitly set environment vars:\n\n```\nexport CFLAGS=\"-I`brew --prefix gmp`/include -I`brew --prefix libsecp256k1`/include\"\nexport LDFLAGS=\"-L`brew --prefix gmp`/lib -L`brew --prefix libsecp256k1`/lib\"\npip3 install . -U \n```\n\n### Install the compilers \nAfter installing Chinstrap, we have to install the `ligo`/`SmartPy` compilers. \n\n```sh\nchinstrap install\n```\n\n![chinstrap-install](/img/chinstrap-install.png)\n\n## Initializing a Chinstrap project\nChinstrap provides a sub-command to initialize a new Chinstrap project. Create an empty folder and initialize the project by running `chinstrap init`.\n\n```sh\nmkdir ChinToken\ncd ChinToken\nchinstrap init\n```\n\n![chinstrap-init](/img/chinstrap-init.png)\n\nFor convenience, Chinstrap provides a flag to generate new mnemonic and secret without a passphrase. \n\n```sh\nchinstrap init -h\n```\n![chinstrap-init](/img/chinstrap-init-1.png)\n\nYou can find the mnemonic inside the `.mnemonic` file and the private key inside `.secret` file\n\nFor this blog, I am going to use a test private key generated by `chinstrap sandbox` command which we will see how to use in the following sections.\n\n![chinstrap-init](/img/chinstrap-secret.png)\n\n## Configuring Chinstrap\n\nChinstrap configuration file is a YAML file that tells chinstrap, which account and network to use for origination, and which compiler to use for compilation and testing. A minimal configuration `chinstrap-config.yml` file for our `ChinToken` project looks like this:\n\n```yaml\nchinstrap:\n  network:\n    development:\n      host: http://localhost:20000\n      accounts:\n        - privateKeyFile: ./.secret\n  compiler:\n    lang: smartpy\n    test: smartpy\n```\n\n## Contract development\nWe can get the FA1.2 implementation from SmartPy/Ligo by running the `chinstrap templates` command.\n\n```sh\n➜ chinstrap templates -h\n\n🐧 Chinstrap - a cute framework for developing Tezos Smart Contracts!\n\n      _     _           _\n  ___| |__ (_)_ __  ___| |_ _ __ __ _ _ __\n / __| '_ \\| | '_ \\/ __| __| '__/ _` | '_ \\\n| (__| | | | | | | \\__ \\ |_| | | (_| | |_) |\n \\___|_| |_|_|_| |_|___/\\__|_|  \\__,_| .__/\n                                     |_|\n\nDocs 📖   : https://chinstrap.io/\nTele 💬   : https://t.me/chinstrap_io\n\nusage: chinstrap templates [-h] (-l {JsLIGO,PascaLIGO,CameLIGO,ReasonLIGO,SmartPy} | -f)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l {JsLIGO,PascaLIGO,CameLIGO,ReasonLIGO,SmartPy}, --language {JsLIGO,PascaLIGO,CameLIGO,ReasonLIGO,SmartPy}\n                        Target language to search templates for.\n  -f, --fa1-2-smartpy   Create FA1.2 contract, test and origination template\n```\n\nLet's create FA1.2 templates by running `chinstrap templates -f`\n\n![chinstrap-template](/img/chinstrap-template.png)\n\nThis creates 3 files:\n- contracts/FA1.2.py       - FA1.2 Contract template implementation in SmartPy\n- tests/FA1.2.smartpy.py   - FA1.2 tests template implementation in SmartPy\n- originations/1_FA12_origination.py  - FA1.2 template origination\n\nOk, now we are ready to compile the test 🕺💃\n\n## Compile contract\n\nChinstrap provides a `compile` sub-command that picks the contracts from `contracts/` folder based on configured `compiler:lang` in the `chinstrap-config.yml` configuration file.\n\n```sh\nchinstrap compile\n```\n\n![chinstrap compile](/img/chinstrap-compile.png)\n\n## Test contract\n\nChinstrap provides a `test` sub-command that picks up the tests from the `tests/` folder based on the configured `compiler:test` in the configuration file.\n\n![chinstrap test](/img/chinstrap-test.png)\n\n## Originate contract\n\nAt this point, the smart contracts are compiled and ready to be originated. We are ready to originate or deploy our smart contracts onto the configured network. We will use Flextesa sandbox as a local node to test our originations. \n\nFor a detailed explanation of how originations work with `Chinstrap`, please read the documentation available here: [Originating smart contracts with Chinstrap](https://chinstrap.io/docs/origination)\n\nOur origination for this FA1.2 looks like this:\n\n```py\nfrom chinstrap.originations import getContract\n\ndef deploy(chinstrapState, network, accounts):\n    contract = getContract(\"FA1_2\")\n\n    initial_storage = contract.storage.encode(\n        {\n            'administrator': accounts[0].key.public_key_hash(), \n            'balances': {}, \n            'metadata': {}, \n            'paused': False, \n            'token_metadata': {\n            }, \n            'totalSupply': 0\n        }\n    )\n    \n    return initial_storage, contract\n\n```\n\nLet's originate on our local flextesa sandbox. \nLet's initialize the sandbox before we start running it. We can initialize the sandbox by running\n\n```sh\nchinstrap sandbox -i\n```\n\nNow, we can start the sandbox in synchronous mode by running\n\n```sh\nchinstrap sandbox -o 20000 -c 5 -p Ithaca\n```\n\nIf you would like to run sandbox in the background or detached mode, you can pass `-d` or `--detach` flag when starting the sandbox\n\n![chinstrap sandbox](/img/chinstrap-sandbox.png)\n\n\nWe can finally originate now. 🎉\n\n```sh\nchinstrap originate\n```\n\n![chinstrap originate](/img/chinstrap-originate.png)\n\n\n## Clean up\nOnce you finished development and testing, you can stop the sandbox by running:\n\n```sh\nchinstrap sandbox -s\n```\n\n## Conclusion\nOn origination, Chinstrap calculates and keeps track of the sha256 hash of the compiled contracts. This helps in preventing duplicate originations. If you want to re-originate the same contract, you can force chinstrap using the -f` or --force flag.\n\nThe first step in developing a Dapp is to deploy smart contracts. Chinstrap takes LIGO/SmartPy code and deploys it onto any public or private network. Each origination needs initial storage compliant with the Michelson code's storage type.\n\nThanks to its easy configuration and readable origination files, Chinstrap is an essential tool throughout the development and deployment of a Dapp. \n\nIn our next post, we will try to leverage `Chinstrap` 's repl to develop, test, originate and interact with the same FA1.2 contract we deployed in this blog. You can find the final code for this post in this repo: [ant4g0nist/ChinToken](https://github.com/ant4g0nist/ChinToken)\n\nHappy Hacking 👾 🎉"
        }
      ],
      "blogListPaginated": [
        {
          "items": [
            "chinstrap-tezos-tezasia-workshop",
            "chinstrap-tezos-smart-contract-development-repl",
            "chinstrap-tezos-smart-contract-development"
          ],
          "metadata": {
            "permalink": "/blog",
            "page": 1,
            "postsPerPage": 10,
            "totalPages": 1,
            "totalCount": 3,
            "blogDescription": "Blog",
            "blogTitle": "Blog"
          }
        }
      ],
      "blogTags": {
        "/blog/tags/chinstrap": {
          "name": "chinstrap",
          "items": [
            "chinstrap-tezos-tezasia-workshop",
            "chinstrap-tezos-smart-contract-development-repl",
            "chinstrap-tezos-smart-contract-development"
          ],
          "permalink": "/blog/tags/chinstrap",
          "pages": [
            {
              "items": [
                "chinstrap-tezos-tezasia-workshop",
                "chinstrap-tezos-smart-contract-development-repl",
                "chinstrap-tezos-smart-contract-development"
              ],
              "metadata": {
                "permalink": "/blog/tags/chinstrap",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 3,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/blog/tags/tezos": {
          "name": "tezos",
          "items": [
            "chinstrap-tezos-tezasia-workshop",
            "chinstrap-tezos-smart-contract-development-repl",
            "chinstrap-tezos-smart-contract-development"
          ],
          "permalink": "/blog/tags/tezos",
          "pages": [
            {
              "items": [
                "chinstrap-tezos-tezasia-workshop",
                "chinstrap-tezos-smart-contract-development-repl",
                "chinstrap-tezos-smart-contract-development"
              ],
              "metadata": {
                "permalink": "/blog/tags/tezos",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 3,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/blog/tags/smart-contracts": {
          "name": "smart-contracts",
          "items": [
            "chinstrap-tezos-tezasia-workshop",
            "chinstrap-tezos-smart-contract-development-repl",
            "chinstrap-tezos-smart-contract-development"
          ],
          "permalink": "/blog/tags/smart-contracts",
          "pages": [
            {
              "items": [
                "chinstrap-tezos-tezasia-workshop",
                "chinstrap-tezos-smart-contract-development-repl",
                "chinstrap-tezos-smart-contract-development"
              ],
              "metadata": {
                "permalink": "/blog/tags/smart-contracts",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 3,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/blog/tags/repl": {
          "name": "repl",
          "items": [
            "chinstrap-tezos-tezasia-workshop",
            "chinstrap-tezos-smart-contract-development-repl"
          ],
          "permalink": "/blog/tags/repl",
          "pages": [
            {
              "items": [
                "chinstrap-tezos-tezasia-workshop",
                "chinstrap-tezos-smart-contract-development-repl"
              ],
              "metadata": {
                "permalink": "/blog/tags/repl",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 2,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        }
      },
      "blogTagsListPath": "/blog/tags"
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "jsx",
        "permalink": "/",
        "source": "@site/src/pages/index.js"
      },
      {
        "type": "mdx",
        "permalink": "/markdown-page",
        "source": "@site/src/pages/markdown-page.md",
        "title": "Markdown page example",
        "description": "You don't need React to write simple standalone pages.",
        "frontMatter": {
          "title": "Markdown page example"
        }
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-theme-classic": {}
}